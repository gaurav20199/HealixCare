spring.application.name=patient-management-service
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/patientdb}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:password}
spring.datasource.driver-class-name=org.postgresql.Driver
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
server.port=8080
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.ByteArraySerializer
spring.flyway.locations=classpath:db/migration/common,classpath:db/migration/dev
# sets the default logging level for all loggers in your application to INFO. It sets logging to show informational and
# more severe events(WARN, ERROR, FATAL) globally, suppressing less informative debug and trace logs.
logging.level.root=info

resilience4j.circuitbreaker.instances.billingService.slidingWindowSize=10
resilience4j.circuitbreaker.instances.billingService.minimumNumberOfCalls=5
resilience4j.circuitbreaker.instances.billingService.failureRateThreshold=50
resilience4j.circuitbreaker.instances.billingService.waitDurationInOpenState=10s
resilience4j.circuitbreaker.instances.billingService.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.billingService.automaticTransitionFromOpenToHalfOpenEnabled=true

resilience4j.retry.instances.billingRetry.maxAttempts=2
resilience4j.retry.instances.billingRetry.waitDuration=500ms

management.endpoints.web.exposure.include=health,info,prometheus,metrics,cache
# since prometheus will be running within the internal docker network hence making endpoints unrestricted
management.endpoint.prometheus.access=unrestricted
# Enabling Micrometer metrics available in a Prometheus-compatible format at the /actuator/prometheus endpoint.
management.prometheus.metrics.export.enabled=true